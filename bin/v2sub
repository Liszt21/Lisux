#!/usr/bin/env python

import requests
import socket
import json
import time
import base64
import logging
import fire
from pathlib import Path

HOME = Path(__file__).resolve().parent.parent / "apps" / "v2sub"

v2ray = {
  "inbounds": [{
    "port": 10800,
    "listen": "127.0.0.1",
    "protocol": "socks",
    "settings": {
      "udp": True
    }
  }, {
    "port": 10801,
    "listen": "127.0.0.1",
    "protocol": "http",
    "settings": {
      "udp": True
    }
  }],
  "outbounds": [{
    "protocol": "freedom",
    "tag": "direct",
    "settings": {}
  }],
  "routing": {
    "domainStrategy": "IPOnDemand",
    "rules": [{
      "type": "field",
      "ip": ["geoip:private"],
      "outboundTag": "direct"
    }]
  }
}


def tcping(ip, port, timeout=2):
    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sk.settimeout(timeout)
    try:
        t1 = time.time()
        sk.connect((ip, port))
        t2 = time.time()
        sk.close()
        return True, int(round((t2-t1)*1000))
    except Exception as err:
        sk.close()
        logging.debug(err)
        return False, timeout*1000


def get_servers(uris, force=False):
    cache = HOME / "servers.json"
    if force or \
       not cache.exists() or \
       time.time() - cache.stat().st_mtime > 3600:
        servers = []
        for uri in uris:
            logging.info("Request {}".format(uri))
            r = requests.get(uri)
            links = base64.b64decode(r.text).decode("ascii").split("\n")
            supported_protocols = ['vmess']
            for link in links:
                try:
                    protocol, server = link.split("://")
                    if protocol not in supported_protocols:
                        logging.debug("{} not support".format(protocol))
                    server = json.loads(base64.b64decode(server))
                    server['protocol'] = protocol
                    if tcping(server['add'], server['port'])[0]:
                        servers.append(server)
                except Exception as error:
                    print(error)
        with open(cache, 'w') as f:
            json.dump(servers, f)
    else:
        logging.info("Loading servers from cache")
        with open(cache, 'r') as f:
            servers = json.load(f)
    for s in servers:
        s['delay'] = tcping(s['add'], int(s['port']))[1]
    return servers


def get_uris():
    fp = HOME / "subscribes.txt"
    if not fp.exists():
        fp.parent.mkdir(parents=True, exist_ok=True)
        with open(fp, "w") as f:
            uri = input("please input your subscribe uri...\n")
            f.write(uri + "\n")
    with open(fp, 'r') as f:
        uris = [uri.strip() for uri in f.readlines()]
    return uris


def restruct(servers, with_freedom=True):
    outbounds = []
    for server in servers:
        if server['protocol'] == "vmess":
            settings = {
                "vnext": [{
                    "address": server["add"],
                    "port": server['port'],
                    "users": [{
                        "id": server["id"],
                        "alterId": server["aid"],
                        "security": "auto",
                        "level": 0
                    }]
                }]
            }
            streamSettings = {
                "network": server["net"],
                "security": server["type"],
                "tag": server["ps"]
            }
            if server['net'] == "ws":
                streamSettings["wsSettings"] = {
                    "path": server['path'],
                    "host": server['host']
                }
        outbound = {
            "protocol": server["protocol"],
            "settings": settings,
            "streamSettings": streamSettings
        }
        outbounds.append(outbound)
    if with_freedom:
        outbounds.append({
            "protocol": "freedom",
            "tag": "direct",
            "settings": {}
        })
    return outbounds


def v2sub():
    uris = get_uris()
    servers = get_servers(uris)
    sorted(servers, key=lambda s: s['delay'])
    outbounds = restruct(servers[:9])
    v2ray["outbounds"] = outbounds
    with open(HOME / "config.json", 'w') as f:
        json.dump(v2ray, f)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    fire.Fire(v2sub)
